<?php

namespace App\Hm6;

class AdapterGenerator
{
	public static function generateAdapter(string $interfaceName, string $namespace = 'App\\Tests\\Hm6'): string
	{
		$reflection = new \ReflectionClass($interfaceName);
		$methods = $reflection->getMethods();

		$adapterClassName = 'AutoGenerated_' . $reflection->getShortName() . 'Adapter';
		$adapterCode = "namespace $namespace;\n\n";
		$adapterCode .= "class $adapterClassName implements \\$interfaceName {\n";
		$adapterCode .= "    private \$gameObject;\n\n";
		$adapterCode .= "    public function __construct(\$gameObject) {\n";
		$adapterCode .= "        \$this->gameObject = \$gameObject;\n";
		$adapterCode .= "    }\n\n";

		foreach ($methods as $method)
		{
			$methodName = $method->getName();
			$parameters = $method->getParameters();
			$parameterList = [];
			$parameterNames = [];

			foreach ($parameters as $parameter)
			{
				$parameterList[] = '$' . $parameter->getName();
				$parameterNames[] = '$' . $parameter->getName();
			}

			$parameterListString = implode(', ', $parameterList);
			$parameterNamesString = implode(', ', $parameterNames);

			$returnType = $method->getReturnType();
			$returnTypeString = '';
			if ($returnType)
			{
				$returnTypeName = $returnType->getName();
				// Проверяем, является ли тип встроенным
				if (!in_array($returnTypeName, [
					'int',
					'float',
					'string',
					'bool',
					'void',
					'array',
					'object',
					'callable',
					'iterable'
				]))
				{
					$returnTypeString = ': \\' . $returnTypeName;
				}
				else
				{
					$returnTypeString = ': ' . $returnTypeName;
				}
			}

			$propertyName = lcfirst(substr($methodName, 3)); // Получаем имя свойства из метода

			$adapterCode .= "    public function $methodName($parameterListString)$returnTypeString {\n";
			if ($returnType && $returnType->getName() !== 'void')
			{
				$adapterCode .= "        return \$this->gameObject->getProperty('$propertyName');\n";
			}
			else
			{
				$adapterCode .= "        \$this->gameObject->setProperty('$propertyName', $parameterNamesString);\n";
			}
			$adapterCode .= "    }\n\n";
		}

		$adapterCode .= "}\n\n";

		// Добавляем код для регистрации в IoC
		$adapterCode .= "\\App\\Hm5\\IoC::resolve('IoC.Register', '$adapterClassName', static function (...\$args) {\n";
		$adapterCode .= "    return new $adapterClassName(...\$args);\n";
		$adapterCode .= "})->execute();\n";

		return $adapterCode;
	}
}
