<?php

namespace App\Tests\Hm6;

use App\Hm2\Angle;
use App\Hm2\GameObject;
use App\Hm2\Interface\IMovingObject;
use App\Hm2\Interface\IRotatingObject;
use App\Hm2\IocBattle;
use App\Hm2\Vector;
use App\Hm5\Ioc;
use App\Hm5\IocInit;
use App\Hm6\AdapterGenerator;
use PHPUnit\Framework\TestCase;

class MetaGenerateTest extends TestCase
{
	public function testAdapterGeneration(): void
	{
		eval($this->adapterRotate);

		$this->gameObject->setProperty('angle', new Angle(0, 360));
		$this->gameObject->setProperty('angularVelocity', new Angle(90, 360));

		$adapterRotate = Ioc::resolve('AutoGenerated_IRotatingObjectAdapter', $this->gameObject);

		$angle = $adapterRotate->getAngle();
		$angularVelocity = $adapterRotate->getAngularVelocity();

		$this->assertInstanceOf(Angle::class, $angle);
		$this->assertEquals(0, $angle->getAngle());
		$this->assertEquals(360, $angle->getDirectionsNumber());
		$this->assertInstanceOf(Angle::class, $angularVelocity);

		$newAngle = new Angle(45, 360);
		$adapterRotate->setAngle($newAngle);
		$this->assertEquals($newAngle, $this->gameObject->getProperty('angle'));
	}

	public function testAdapterMoveCommand(): void
	{
		eval($this->adapterMove);

		$this->gameObject->setProperty('location', new Vector(12, 5));
		$this->gameObject->setProperty('velocity', new Vector(-7, 3)); // Correct velocity vector

		$moveAdapter = Ioc::resolve('AutoGenerated_IMovingObjectAdapter', $this->gameObject);
		Ioc::resolve('MoveCommand', $moveAdapter)->execute();

		$newLocation = $moveAdapter->getLocation();
		$this->assertEquals([5, 8], [$newLocation->getX(), $newLocation->getY()]);
	}

	public function setUp(): void
	{
		IocInit::registry();
		IocBattle::registry();

		$this->gameObject = new GameObject();
		$this->adapterMove = AdapterGenerator::generateAdapter(IMovingObject::class);
		$this->adapterRotate = AdapterGenerator::generateAdapter(IRotatingObject::class);
	}
}
